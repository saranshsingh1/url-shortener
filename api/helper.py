"""
File contains general helper functions
for dealing with short url codes.
"""

import secrets
from urllib.parse import urlparse, ParseResult
from typing import Dict

# Mimic the variable to be the database
# for storing the short ids and their
# associating long URLs.
db: Dict[str, str] = {}


def get_url_id() -> str:
    """
    Helper function that returns a unique id
    that is currently not being used for another
    URL.
    Returns:
        str: Unique url id for generating the shorter URL.
    """

    # Run the loop until we get a unique id.
    while True:
        # For MVP, we can use nbytes of 5 but in production
        # this value needs to be set higher and other modifications
        # may be needed to have a scalable solution.
        # Reference -
        # -> https://docs.python.org/3/library/secrets.html#secrets.token_urlsafe
        url_id: str = secrets.token_urlsafe(nbytes=5)

        # Ensure the same token is not being used
        # for another URL.
        if url_id not in db:
            break

    return url_id


def get_long_url_code(base_url: str, short_url: str) -> str:
    """
    Function to return the original URL's short url code
    using which the ``short_url`` provides a redirect.
    Args:
        base_url (str): The scheme plus domain URL of the service
            running the application.
        short_url (str): The URL sent by the user which redirects
            to it's longer version.
    Raises:
        ValueError: If the 'base_url' does not match the 'short_url'
            base domain address.
    Returns:
        str: The url code found in the 'short_url'.
    """

    # Reference -
    # -> https://docs.python.org/3/library/urllib.parse.html#urllib.parse.urlparse
    path: ParseResult = urlparse(url=short_url)

    # scheme returns http(s), ftp(s), etc.
    # netloc returns www.google.com, etc.
    # NOTE: 'base_url' always has a trailing slash, hence we add it as well.
    returned_base: str = f"{path.scheme}://{path.netloc}/"

    if returned_base != base_url:
        raise ValueError(f"The short url '{short_url}' is not registered with us.")

    # path.path return the path after the netloc. Example: '/foo.html'.
    # we split the string using the '/' separator and take the last
    # element from the list that is generated by the split.
    url_code: str = path.path.split(sep="/", maxsplit=1)[-1]

    # Return the original URL or None if it is not found.
    return url_code
